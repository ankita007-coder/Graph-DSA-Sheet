#User function Template for python3
from typing import List
import heapq
class Solution:
    def shortestPath(self,n:int, m:int, edges:List[List[int]] )->List[int]:
        # code here
        d=[float('inf')]*(n+1)
        parent= [i for i in range(n+1)]
        
        adj = [[] for i in range(n+1)]
        
        for i in range(m):
            u,v,wt = edges[i]
            adj[u].append((v,wt))
            adj[v].append((u,wt))
            
            
        minheap=[]
        
        heapq.heappush(minheap,(0,1))
        d[1]=0
        parent[1]=1
        
        while minheap:
            dis,node = heapq.heappop(minheap)
            for v,wt in adj[node]:
                if dis+wt<d[v]:
                    d[v]=dis+wt
                    heapq.heappush(minheap,(d[v],v))
                    parent[v]=node
                    
        if d[n]==float('inf'):
            return [-1]
            
        node = n
        res=[]
        while parent[node]!=node:
            res.append(node)
            node = parent[node]
        res.append(1)
        
        return [d[n]]+res[::-1]
        


#{ 
 # Driver Code Starts
from collections import defaultdict


def check(n, path, edges):
    gp = [{} for i in range(n + 1)]
    for u, v, w in edges:
        if v in gp[u]:
            gp[u][v] = min(gp[u][v], w)
        else:
            gp[u][v] = w

        if u in gp[v]:
            gp[v][u] = min(gp[v][u], w)
        else:
            gp[v][u] = w

    s = 0
    for i in range(2, len(path)):
        if path[i] not in gp[path[i - 1]]:
            return False
        s += gp[path[i - 1]][path[i]]

    return s == path[0]


if __name__ == "__main__":
    for _ in range(int(input())):
        n, m = map(int, input().split())
        edges = []
        for i in range(m):
            a, b, w = map(int, input().split())
            edges.append([a, b, w])

        obj = Solution()
        res = obj.shortestPath(n, m, edges)
        if res[0] == -1:
            print(-1)
        else:
            if check(n, res, edges):
                print(res[0])
            else:
                print(-2)

# } Driver Code Ends
