#User function Template for python3

from typing import List
import heapq 
class Solution:
    
    def minimumMultiplications(self, arr : List[int], start : int, end : int) -> int:
        # code here
        if start==end:
            return 0
        q=[]
        mod = 100000
        dist = [float('inf') for _ in range(100000)]
        
        dist[start]=0
        heapq.heappush(q,(0,start))
        
        while q:
            d,node = heapq.heappop(q)
            for i in arr:
                prod = (node*i)%mod
                if prod==end:
                    return d+1
                if d+1<dist[prod]:
                    dist[prod]=d+1
                    heapq.heappush(q,(d+1,prod))
        return -1
                

#{ 
 # Driver Code Starts
#Initial Template for Python 3

if __name__=="__main__":
    for _ in range(int(input())):
        n = int(input())
        arr = [int(x) for x in input().strip().split()]
        start, end = list(map(int,input().split()))
        obj=Solution()
        print(obj.minimumMultiplications(arr, start, end))
# } Driver Code Ends
