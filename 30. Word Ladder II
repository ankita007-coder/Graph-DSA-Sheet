from collections import deque

class Solution(object):
    def findLadders(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: List[List[str]]
        """
        wordSet = set(wordList)
        if endWord not in wordSet:
            return []

        queue = deque([[beginWord]])
        level = 0
        usedOnLevel = []
        result = []

        while queue:
            vec = queue.popleft()
            
            # Erase all words that have been used in previous levels
            if len(vec) > level:
                level += 1
                for word in usedOnLevel:
                    wordSet.discard(word)
                usedOnLevel = []

            word = vec[-1]
            for i in range(len(word)):
                original_char = word[i]
                for c in range(97, 123):  # ASCII values for 'a' to 'z'
                    new_char = chr(c)
                    word = word[:i] + new_char + word[i+1:]
                    
                    if word in wordSet:
                        new_vec = vec + [word]
                        queue.append(new_vec)
                        usedOnLevel.append(word)
                        
                        if word == endWord:
                            result.append(new_vec)
                
                # Restore the original word
                word = vec[-1]
        
        return result
