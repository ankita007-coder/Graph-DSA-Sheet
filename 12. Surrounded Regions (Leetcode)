class Solution(object):
    def solve(self, board):
        """
        :type board: List[List[str]]
        :rtype: None Do not return anything, modify board in-place instead.
        """
        m = len(board[0])
        n = len(board)
        drow = [-1,1,0,0] 
        dcol = [0,0,1,-1]
        vis = [[0]*m for i in range(n)]
        for i in range(m):
            if board[0][i]=='O' and vis[0][i]==0:
                self.dfs(0,i,board,vis,drow,dcol)

            if board[n-1][i]=='O' and vis[n-1][i]==0:
                self.dfs(n-1,i,board,vis,drow,dcol)
        
        for i in range(n):
            if board[i][0]=='O' and vis[i][0]==0:
                self.dfs(i,0,board,vis,drow,dcol)

            if board[i][m-1]=='O' and vis[i][m-1]==0:
                self.dfs(i,m-1,board,vis,drow,dcol)
        for i in range(n):
            for j in range(m):
                if board[i][j]=="O" and vis[i][j]==0:
                    board[i][j]='X'
    
    def dfs(self,r,c,board,vis,drow,dcol):
        n = len(board)
        m = len(board[0])
        vis[r][c]=1
        for i in range(4):
            row = r+drow[i]
            col = c+dcol[i]
            if 0<=row<n and 0<=col<m and board[row][col]=='O' and vis[row][col]==0:
                self.dfs(row,col,board,vis,drow,dcol)
