#User function Template for python3

class Solution:
    # Function to construct and return cost of MST for a graph
    # represented using adjacency matrix representation
    '''
    V: nodes in graph
    edges: adjacency list for the graph
    S: Source
    '''
    def bellman_ford(self, V, edges, S):
        #code here
        d = [float('inf')]*V
        d[S]=0
        for i in range(V-1):
            for u,v,wt in edges:
                if d[u]+wt<d[v]:
                    d[v]= d[u]+wt
        for u,v,wt in edges:
            if d[u]!=float('inf') and d[u]+wt<d[v]:
                return [-1]
        
        for i in range(V):
            if d[i]==float('inf'):
                d[i]=10**8
            
        return d
                
                

#{ 
 # Driver Code Starts
#Initial Template for Python 3
import atexit
import io
import sys


if __name__ == '__main__':
    test_cases = int(input())
    for cases in range(test_cases):
        V,E = map(int,input().strip().split())
        edges = []
        for i in range(E):
            u,v,w = map(int,input().strip().split())
            edges.append([u,v,w])
        S=int(input())
        ob = Solution()
        
        res = ob.bellman_ford(V,edges,S)
        for i in res:
            print(i,end=" ")
        print()
# } Driver Code Ends
